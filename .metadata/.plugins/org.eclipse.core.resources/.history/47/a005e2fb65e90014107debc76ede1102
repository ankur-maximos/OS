package com.maximos.os;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.TimerTask;
import java.util.concurrent.BrokenBarrierException;
import java.util.concurrent.CyclicBarrier;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * Main class containing
 * 
 * @author maximos
 *
 */
public class Dining {

	static int TOT_RESTAURANT_TIME = 5;
	static int STOPPING_TIME = 1;
	static int globalTime = 0;
	static int numTables;
	static int numCooks;
	static String COOK_THREAD_GROUP = "cooks";

	static List<Order> orders = new ArrayList<Order>();
	static List<Cook> cookList = new ArrayList<Cook>();
	static Object cooks = new Object();
	static Object tables = new Object();
	static Object cookCounter = new Object();
	CyclicBarrier barrier;
	CyclicBarrier cookBarrier;
	static boolean restaurantClosed = false;

	// shared resources
	static AtomicInteger currentTables;
	static AtomicInteger currentCooks;
	static AtomicBoolean friesMachineBusy;
	static AtomicBoolean burgerMachineBusy;
	static AtomicBoolean cokeMachineBusy;

	static public void printOrders() {

	}

	class OrderThread extends Thread {
		Order order;

		public OrderThread(Order order) {
			this.order = order;
		}

		@Override
		public void run() {

			/*
			 * if (numTables > 0 && numCooks > 0) {
			 * 
			 * } else if (numTables > 0 && !(numCooks > 0)) {
			 * 
			 * } else if (!(numTables > 0) && (numCooks > 0)) {
			 * 
			 * } else { try { System.out.println(""); obj.wait(); } catch
			 * (InterruptedException e) { e.printStackTrace(); } }
			 */
		}
	}

	class CookThread extends Thread {

		private Order order;
		private Cook cook;

		// constructor
		public CookThread(ThreadGroup threadGroup, int cookId) {
			super(threadGroup, "cook" + cookId);
			cook = new Cook(cookId);
			this.cook.setCookId(cookId);
			this.cook.setBusy(false);
		}

		public Order getOrder() {
			return order;
		}

		public void setOrder(Order order) {
			this.order = order;
		}

		public Cook getCook() {
			return cook;
		}

		public void setCook(Cook cook) {
			this.cook = cook;
		}

		@Override
		public void run() {
			System.out.println(Thread.currentThread().getName() + " is ready");
			while (restaurantClosed != true) {
				while (!this.cook.isBusy())
					;
				/*
				 * Cook got his order which he will start to process
				 * 
				 * -- Work:
				 *  Basically responsible for computation of the Customer Timing
				 *  
				 * 
				 */
				

			}
		}
	}

	public static Thread[] getGroupThreads(final ThreadGroup group) {
		if (group == null)
			throw new NullPointerException("Null group");
		int nAlloc = group.activeCount();
		int n = 0;
		Thread[] threads = null;
		do {
			nAlloc *= 2;
			threads = new Thread[nAlloc];
			n = group.enumerate(threads, false);
		} while (n == nAlloc);
		return java.util.Arrays.copyOf(threads, n);
	}

	class ExitDiner implements Runnable {

		@Override
		public void run() {
			try {
				if (barrier.await() == 0) {
					OrderThread thread = (OrderThread) Thread.currentThread();
					System.out.println("Exiting user :"
							+ thread.order.getArrivalTime());
					orders.add(thread.order);
					globalTime = thread.order.getExitTime();
					synchronized (tables) {
						tables.notifyAll();
					}
				}
			} catch (InterruptedException e) {
				e.printStackTrace();
			} catch (BrokenBarrierException e) {
				e.printStackTrace();
			}
		}
	}

	class MyTimerTask extends TimerTask {

		@Override
		public void run() {

		}
	}

	/**
	 * returns any spare cook
	 * 
	 * @return cook id
	 */
	public static int spareCook() {
		int id = -1;
		for (Cook cook : cookList) {
			if (!cook.isBusy()) {
				return cook.getCookId();
			}
		}
		return id;
	}

	/**
	 * This method gets cook for the user
	 * 
	 * It performs below operations
	 * 
	 * 
	 * @param tg
	 * @param order
	 * @return
	 */
	public static Cook getCook(ThreadGroup tg, Order order) {
		Thread cooks[] = getGroupThreads(tg);
		for (int ii = 0; ii < cooks.length; ii++) {
			CookThread cook = (CookThread) cooks[ii];
			if (!cook.getCook().isBusy()) {
				cook.setOrder(order);
				cook.getCook().setBusy(true);
				currentCooks.decrementAndGet();
				return cook.getCook();
			}
		}
		return null;
	}

	public static void main(String args[]) {

		int numDiners;
		Scanner sc = new Scanner(System.in);

		/*
		 * Initializing the restaurant
		 * 
		 * TablesCount, Machines availability, making Cooks ready for servicing
		 */
		// initializing diners
		numDiners = Integer.parseInt(sc.nextLine().trim());

		// initializing tables and cooks
		numTables = Integer.parseInt(sc.nextLine().trim());
		currentTables = new AtomicInteger(numTables);
		numCooks = Integer.parseInt(sc.nextLine().trim());
		currentCooks = new AtomicInteger(numCooks);

		// initializing machines status
		friesMachineBusy = new AtomicBoolean(false);
		burgerMachineBusy = new AtomicBoolean(false);
		cokeMachineBusy = new AtomicBoolean(false);

		// starting main class
		Dining dine = new Dining();

		// initializing thread group for the cooks
		ThreadGroup tg = new ThreadGroup(COOK_THREAD_GROUP);

		// Starting Cook threads
		System.out.println("Intializing Cooks..");
		for (int ii = 0; ii < numCooks; ii++) {
			CookThread cook = dine.new CookThread(tg, (ii + 1));
			cook.start();
		}

		/*
		 * Thread th[] = getGroupThreads(tg); for (int ii = 0; ii < th.length;
		 * ii++) { CookThread cook = (CookThread) th[ii];
		 * System.out.println("cook :" + cook.getName()); }
		 */

		dine.barrier = new CyclicBarrier(STOPPING_TIME, dine.new ExitDiner());

		/*
		 * Now processing each order and creating threads for it
		 * 
		 * if tables are available then well and good, else order will have to
		 * wait
		 */
		Order order;
		for (int ii = 0; ii < numDiners; ii++) {
			System.out.println("Incoming user: " + (ii + 1));
			String str[] = sc.nextLine().split(" +");
			order = new Order();
			order.setArrivalTime(Integer.parseInt(str[0].trim()));
			order.setNumBurgers(Integer.parseInt(str[1].trim()));
			order.setNumFries(Integer.parseInt(str[2].trim()));
			if (Integer.parseInt(str[3]) == 0) {
				order.setCoke(false);
			} else {
				order.setCoke(true);
			}
			globalTime = order.getArrivalTime();
			synchronized (tables) {
				if (currentTables.get() > 0) {
					System.out.println("user: " + (ii + 1) + "sitting");
					currentTables.decrementAndGet();
					order.setSeatedTable(numTables - currentTables.get());
					order.setSeatedTable(globalTime);
					/*
					 * After getting a seat, user will look for a cook
					 * 
					 * If cook is available then well and good else the user
					 * will have to wait for the cook to be available.
					 */
					synchronized (cooks) {
						if (currentCooks.get() > 0) {
							// Cook cook = getCook(cookId);
							// order.setServingCook(cook);
							Cook cook = getCook(tg);
							order.setServingCook(cook);
						} else {
							try {
								cooks.wait();
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
						}
					}
				} else {
					try {
						tables.wait();
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
			}
		}

		sc.close();
	}
}
